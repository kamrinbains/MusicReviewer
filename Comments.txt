4/24 Nick - Heres what I did today so far
-Added static/ folder for CSS and its input/output for Tailwind.
-I think(?) I reinstalled Django since there was some weird error I had so I re-ran it
-Updated settings.py for the static files and to look in the templates/ folder
-Installed Tailwind, PostCSS & Autoprefixer
^ Regarding tailwind, unless you can find a way to get it to fully initalize as Tailwind 4.0, I kept running into issues
so I hand-created tailwind.config.js & postcss.config.js and built static/css/output.css via npx postcss.
I actually had ChatGPT do the process for me since I had no clue how to initalize it otherwise, but you can find a 
rundown in the TailWindExplanation.txt file I added.

- Also added templates/base.html (loads output.css)

- and created templates/home.html and updated app1/views.py + urls.py
- I also ran makemigrations/migrate but we got no models yet
- Launched server, confirmed “Welcome to MusicReviewer” styled by Tailwind that you can see in the templates/home.html

I may have forgotten some stuff but this should be most of what I did for now.
_______________________________________________________________________________________
4/24 Kamrin - I restarted the project just to clean it up
- I ran the command:
	npm install tailwindcss @tailwindcss/cli
- Added the import - @import "tailwindcss";
- Created a script in package.json for watch:css
- Created static folder in the root directory
- Created css folder in static to hold input and output
- Added browser auto refresh for any static changes (basically changes to css or html)
___________________________________IMPORTANT___________________________________________
- I had to restart the django project so your changes were lost
- Tailwind is working correctly and to run the server, open 2 terminals and run each of
the following commands:
    1. npm run watch:css
    2. python manage.py runserver
- Leave the terminals running and make any edits on html or static files and the browser
will automatically refresh, ctrl-c to stop

- Any html files you create (that do not extend the base.html file) will need to have
these 2 lines at the top:
    {% load static %}
    <link rel="stylesheet" href="{% static 'dist/styles.css' %}">

- The rest below is just stuff that can help you understand the project structure

- There are 2 template directories, one in the root directory and one under app1
    - The one in the root directory is for the base.html file
    - The one under app1 is for the home.html file (where we would put other pages)
- The static folder is in the root directory and will hold our static files

- Look at both html files in both template directories
    - The base.html file is the main template that will be used for all pages
    - The home.html file is the page that will be displayed when the server is running
- We can use the {% block %} tag to define sections of the base.html file that can be overridden
    - For example, the {% block content %} tag in the base.html file is where we can
    put the content for each page
    - The {% extends %} tag in the index.html file tells Django to use the base.html
    file as the main template


- The next thing I think to work on is fixing the base template to get it looking how we want
and to contain a navbar and footer, I can work on it or if you get to it first let me know
- Or you can work on a gameplan for implementing the music api, i will let you know what I work on next
_______________________________________________________________________________________
4/27 Nick what I did
so today (And 4/28) I added the user token for the Discogs API and incorporated it into the settings/views/urls page etc.
Along with that I created and organized index.html (Home) and made the search_results.html page,
I also made a super suepr basic and shitty homepage layout with a search bar and featured album section. but its scuffed asf and needs work,
In fact I will progress with that this week as well, also the Django package didnt seem to be initilaized properly so I fixed it lol all good
We'll discuss more of this soon, hope to get most of the bulk done this week.

_______________________________________________________________________________________
4/28 Nick what i did today
- made a review, contact, about .html pages
- contact page well have it so it actually doesnt submit anything but seems like it does
- ­included app1.urls in music/urls.py so all app routes resolve and work
- the search results page for the "Write a Review" passes album title and artist dynamically through the urls
- also updated views.py to handle dynamic album and artist data for the review page.
- Next up is like making the home page look good and also adding a review model to store info, and also making user accounts
I kind of forgot about that so far but is simple and can probably rip it from the chess board
_______________________________________________________________________________________
4/29 Kamrin - 
- Changed frontend styling mostly
- Removed Review from the Navbar:
	>I don't think it should be in the navbar as, for now, the only way to get an album there is by going to the search page, searching an album, then clicking review. It makes sense to have the review page in the navbar if you can search an album and click it from a list (while still on the review page)
	>To add it back just add 
		<a href="/review">Review</a>
	to the base.html navbar component
- Changed navbar layout and added account on the right hand side
- For the navbar, I added a log in / account button, however they aren't linked to any pages. When we make the pages that specific part of the navbar will look something like this:
	
      {% if user.is_authenticated %}
        <a href="{% url 'account' %}"
           class="ml-4 px-3 py-1 bg-white text-blue-600 rounded hover:bg-gray-100">
          Account
        </a>
      {% else %}
        <a href="{% url 'login' %}"
           class="ml-4 px-3 py-1 bg-white text-blue-600 rounded hover:bg-gray-100">
          Log In
        </a>


- I decided to use Ionicons for adding icons, such as the user icon on the navbar. Had me add a script on the bottom of the base.html template.

- Also for the contact page, I can add the functionality for that and it shouldn't take me long. I just need an email to create an account. I might just make a bs gmail account for this, just think of a name for the website and I'll make the email after it

- Need to make a login page and maybe account page for details on there account (if they want to change their email or password for example)
- Need to create the model for users in Django and then brainstorm how we want to save reviews and display them to other users
_______________________________________________________________________________________
4/30 Nick
Created the reviews model to store from user
-added login and account, but need to make it login from the get-go like chess site
-made the edit_review.html form for updating submitted reviews
- Some extra features in it like highest rated review and such, I need to polish it and go back I'll do it a bit later
_______________________________________________________________________________________
5/5 Kamrin
- Changed links on the account button in navbar
- Editing styling of login page and creating sign up page
- Added django-formify so we can make better looking forms (ex: login / signup) 
	- https://django-formify.readthedocs.io/en/latest/index.html
- Updated forms on login and signup pages
- Had to change settings.py Templates
	- 'APP_DIRS': False,
- Fixed logout button
- Added if statements in account.html
- Fixed an error happening with writing reviews
- Deleted the EXTRA view:
	@login_required
	def account(request):

- Important things to finish:
	- Delete review
	- Edit review
- Need to make a way to view other peoples reviews (if it isnt way too complicated)
- I will add the implementation for Contact Us page tomorrow
- Need a name for the site
- Also need to fix the footer to make it stuck to the absolute bottom of the page (ill work on it tmrw)
- Need to look more into the search page, few things:
	- I might add in something where users can search by artist or genre (maybe)
	- It seems that the artist and album aren't being correctly separated when queried from discogs
_______________________________________________________________________________________
5/6 Kamrin
- Changed alot of stuff
- Fixed footer so it stays at the bottom of the page
- Finished edit review and delete review
- Fixed error where the Artist name and Album title weren't being split, so now when searching an album everything looks right
- Added confirm_delete.html for a better confirmation page for deleting a review
- Fixed a bunch of UX/UI stuff so it looks a bit better

Important to know
- I added to the search_discogs view, so now the data is cleaned when returned and we have the album name and artist name separated before being passed back to search results

Next steps:
- Come up with a site name -> Update site name, and create an email so I can do the contact page
- Add functionality to see other peoples reviews on albums
	- My thoughts on that, i dont think it will be too hard to implement and will prob do it tmrw, but I am thinking that I am then going to move the write a review button. Maybe change the button on search results so it takes you to a view page of the album and it shows existing reviews and next to it will be the write a review button
- Then I will look into adding different search queries but it might be a bit complicated as I implemented the data cleaning and I don't know if I might have to change it for different search queries

- Last we will have to get google cloud working and whatever load balancers he talked about previously
_______________________________________________________________________________________
5/8 Kamrin
- Changed search results button (Write a review) -> Reviews and it shows all users reviews for that album (by the specific artist)
- Had to add the page where it would show other users reviews of that album (must be logged in to see reviews)
- Added pagination to the serach results, so now it shows more than the limit of 50 previously
- album_reviews page has pagination as well so it has good balance of how many items can be shown
	- search 'Views' by drake to see an example of the pagination for the reviews (i made 12 reviews, 10 max per page)

- On account.html, if you have an existing review, all you have to do is click on the Album Card component and it will take you directly to all the album reviews


- Last thing I might add, different search filters so you can search by artist, genre, etc (maybe depending on timing)
- Only way to add a review is by going to search an album -> look at all reviews -> click write a review button

- Also, changed the model Review, so now it saves the album thumbnails (needed for account.html)

Next steps:
- Site name -> Update site name on header and footer, create email for contact page
- A delete account button would be nice
- Update home page
- Get it running on GCP
_______________________________________________________________________________________
Nick 5/8
Again, thank you a ton for your help, I should be out of the hospital towards the afternoon tomorrow, my kidneys were near failure
- regardless, I decided on the name "LinerNotes" as the website name, you can google it but its the album notes left on vinyl and CD'
- Also I made the username for the support email and made it a placeholder, heres the contact info:
linernotecontact@gmail.com , password: Contact$#Sn9e82!!
the contact page fully works^ test it out urself
- next aka tomorrow i will overhaul the stylization on the page and get the tarball deployment working.
